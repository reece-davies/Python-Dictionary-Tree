# COMP3002 assignment - Task 2B
# Depth First & Breadth First Traversal with Dictionary-based binary trees

# Search all nodes (first-come-first-serve)
def testSearch(tree):
    print("Node value : ", tree['value'])

    if not tree['children']:
        print("Node ", tree['value'], " has no children")
        return
    else:
        print("Node ", tree['value'], " has children")
        for child in tree['children']:
            testSearch(child)


        for child in tree['children']:
            testSearch(child)
            print("Child : ", child['value'])

            if child['value'] < tree['value']:
                print("Call search on child : ", child['value'])
                testSearch(child)



# Depth First search in order of node values (smallest to largest)
def depthFirstSearch(tree):

    if len(tree['children']) == 2:      # Lorem ipsum - what if there are more than two arguments?
        for i in range(2):

            if tree['children'][i]['value'] < tree['value']:

                if tree['children'][0]['value'] < tree['children'][1]['value']:
                    depthFirstSearch(tree['children'][0])
                    print("Node value : ", tree['value'])
                    depthFirstSearch(tree['children'][1])
                elif tree['children'][0]['value'] > tree['children'][1]['value']:
                    depthFirstSearch(tree['children'][1])
                    print("Node value : ", tree['value'])
                    depthFirstSearch(tree['children'][0])

    elif len(tree['children']) == 1:
        depthFirstSearch(tree['children'][0])
        print("Node value : ", tree['value'])
    else:
        print("Node value : ", tree['value'])



# Breadth First search in order of first-come-first-serve
def breadthFirstSearch_v2(tree):
    #print("Node value : ", tree['value'], "\n")   
    
    queue = []
    queue.append(tree)
    #print(queue[0])

    while(len(queue) > 0):
        #print("queue[0] value ", queue[0]['value'])
        print("Node value = ", queue[0]['value'])
        tree = queue.pop(0)

        if tree['children'] is not None:
            for i in range(len(tree['children'])):
                queue.append(tree['children'][i])




# Breadth First search in order of first-come-first-serve
def breadthFirstSearch(tree):
    #print("Node value : ", tree['value'], "\n")   
    
    queue = []
    queue.append(tree)
    #print(queue[0])

    while(len(queue) > 0):
        #print("queue[0] value ", queue[0]['value'])
        print("Node value = ", queue[0]['value'])
        tree = queue.pop(0)

        if tree['children'] is not None:
            for i in range(len(tree['children'])):
                queue.append(tree['children'][i])

                
       
dictionaryTree = {
    'value' : 5,
    'children' : [
        {
            'value' : 2,
            'children' : [
                {
                    'value' : 4,
                    'children' : [
                        {
                            'value' : 3,
                            'children' : []
                        }]                
                },
                {
                    'value' : 1,
                    'children' : []
                }]
        },
        {
            'value' : 8,
            'children' : []
        }
    ]}

#           5
#         /   \
#       2       8
#     /   \
#   1       4
#         /
#       3

#print(dictionaryTree['children'][0])
#print(len(dictionaryTree['children']))
print("Tree = ", dictionaryTree, "\n")
print("-- Tree visualisation --")
print("            5")
print("          /   \ ")
print("        2       8")
print("      /   \ ")
print("    1       4")
print("          / ")
print("        3")

print("\n -- Depth first traversal -- ")
print("Expected output: 1 2 3 4 5 8")
depthFirstSearch(dictionaryTree)

# Lorem ipsum:
# 1. In acdending order or order of searching?
# 2. Implement for more than two children per node.
# 3. Implement insert algorithm.

print("\n -- Breadth first traversal -- ")
print("Expected output: 5 2 8 4 1 3")
print("Expected output: 5 2 8 1 4 3")
breadthFirstSearch(dictionaryTree)

print("\n -- New algorithm --")
breadthFirstSearch_v2(dictionaryTree)






